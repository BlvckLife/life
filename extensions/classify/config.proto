/* Copyright 2020 Istio Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package istioclassify;

// Configuration to classify traffic.
message PluginConfig {
  // next id: 2
  // Multiple independent classification configurations.
  repeated Classification classifications = 1;
}

// Classification uses [well known attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter#condition) as inputs and produces
// a new attribute that denotes a specific classification.
// The new attribute can be used by a downstream plugin.
//
// Example: A classifier may produce an attribute called `istio.operationId` which is analogous to the `operationId` in the OpenAPI Spec.
// The Stats plugin will run after the classifier and use `istio.operationId` to populate a dimension. 
message Classification {
  // Phase denotes plugin lifecycle phase when the classification is evaluated. 
  Phase phase = 1;

  // The following attribute is populated on successfully running the classification.
  // Example: `istio.operationId`
  string output_attribute = 2;

  // A Classification may fail to evaluate when an attribute is not available.
  // Example: `response.code` may not be available when a request ends abruptly.
  // When evalution failes, the plugin will return an error to the client.
  // This is the correct behaviour if the result of the classification is used by an authz plugin.
  // If the result of the classifier is used by stats, you may just want to log an error but not
  // fail the request. If `ignore_errors=true` then the classifier plugin will not fail the request.
  bool ignore_errors = 3;
 
  // Matches are evaluated in order until the first successful match.
  // The value specified by the successful match is assgined to the output_attribute. 
  repeated Match match = 4;
}

// If the condition evaluates to true then the Match returns the specified value. 
message Match {
  // Condition is a [CEL expressions](https://github.com/google/cel-spec/blob/master/doc/langdef.md)
  // You may use [well known attributes](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter#condition) in the CEL expression.
  //
  // Examples:
  //
  // a GET on /books
  // { value: ListBooks,
  //   condition: request.url_path == "/books" && request.method == "GET" }
  //
  // a GET on /shelves/{id1}/books/{id2}
  // { value: GetBook,
  //   condition: request.url_path.matches("^/shelves/\d*/books/\d*$") && request.method == "GET" }
  // Note: Use anchors {^, $} to ensure that the regex evaluates efficiently.
  // Note: request.url_path is normalized and stripped of query params.
  //
  // a Read only operation on books
  // { value: ReadOnlyBooks, 
  //   condition: request.url_path.startsWith("/books/") && in(request.method, ["GET", "HEAD"])}
  string condition = 1;

  // If condition evaluates to true, return the `value`.
  string value = 2;
}

// Phase determines when the classification is performed.
enum Phase {
  option allow_alias = true;
  // Classification is performed after the response is sent back to the client.
  // All information about the request is available in this phase,
  // and classification does not add to the latency observed by the client.
  PHASE_UNSPECIFIED = 0;
  AFTER_RESPONSE = 0;
  // Classification is performed during request processing, and adds to
  // the request latency as observed by the client.
  // Only request related information can be used in this phase.
  // For example: you may not use response headers here.
  // Attemping to use response headers in request phase will never result in a match.
  // Not Implemented
  // $hide_from_docs
  ON_REQUEST = 1;

  // ADD ON_RESPONSE=2 if there is a need.
}
