/* Copyright 2020 Istio Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package istio.attributegen;

// Configuration to generate new attributes based on attributes of the proxied
// traffic.
message PluginConfig {
  // next id: 2
  // Multiple independent attribute generation configurations.
  repeated AttributeGeneration attributes = 1;
}

// AttributeGeneration uses [well known attributes]
// (https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter#condition)
// as inputs and produces a new attribute.
// The new attribute can be used by a downstream plugin.
//
// Example: AttributeGen may produce an attribute called `istio.operationId`
// which is analogous to the `operationId` in the OpenAPI Spec. The Stats plugin
// will run after this plugin and use `istio.operationId` to populate a
// dimension.
//
// If multiple AttributeGenerations produce the same attribute, the result of
// the last generation will be visible to downstream filters.
message AttributeGeneration {
  // Phase denotes plugin lifecycle phase when the new attribute is generated.
  // Default: After the response is sent back to the client.
  //
  // $hide_from_docs
  Phase phase = 1;

  // The following attribute is populated on a successful match.
  // Example: `istio.operationId`
  // `istio.` attribute namespace is reserved by Istio.
  //
  // AttributeGeneration may fail to evaluate when an attribute is not
  // available. Example: `response.code` may not be available when a request
  // ends abruptly. When evaluation fails the plugin will set an error_attribute
  // to the error string. error_attribute = ${output_attribute}_error
  //
  // If the generated attribute is used by an authz plugin, it should fail the
  // request if the `error_attribute` is set. If the generated attribute is used
  // by Stats, it may log the error but not fail the request.
  string output_attribute = 2;

  // Matches are evaluated in order until the first successful match.
  // The value specified by the successful match is assgined to the
  // output_attribute.
  repeated Match match = 3;
}

// If the condition evaluates to true then the Match returns the specified
// value.
message Match {
  // Condition is a [CEL
  // expressions](https://github.com/google/cel-spec/blob/master/doc/langdef.md)
  // You may use [well known attributes]
  // (https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/security/rbac_filter#condition)
  // in the CEL expression.
  //
  // Examples:
  //
  // a GET on /books
  // { value: ListBooks,
  //   condition: request.url_path == '/books' && request.method == 'GET' }
  //
  // a GET on /shelves/{id1}/books/{id2}
  // { value: GetBook,
  //   condition:
  //   request.url_path.matches('^/shelves/[[:alnum:]]*/books/[[:alnum:]]*$') &&
  //   request.method == 'GET' }
  // Note: CEL uses [re2](https://github.com/google/re2/wiki/Syntax) regex
  // library.
  //       Use anchors {^, $} to ensure that the regex evaluates efficiently.
  // Note: request.url_path is normalized and stripped of query params.
  //
  // a Read only operation on books
  // { value: ReadOnlyBooks,
  //   condition: request.url_path.startsWith('/books/') && in(request.method,
  //   ['GET', 'HEAD'])}
  //
  // An empty condition evaluates to `true` and should be used to provide a
  // default value.
  string condition = 1;

  // If condition evaluates to true, return the `value`.
  string value = 2;
}

// Phase determines when the classification is performed.
enum Phase {
  option allow_alias = true;
  // AttributeGeneration is performed after the response is sent back to the
  // client. All information about the request is available in this phase, and
  // classification does not add to the latency observed by the client.
  PHASE_UNSPECIFIED = 0;
  AFTER_RESPONSE = 0;

  // AttributeGeneration is performed during request processing, and adds to
  // the request latency as observed by the client.
  // Only request related information can be used in this phase.
  // For example: you may not use response headers here.
  // Attemping to use response headers in request phase will never result in a
  // match.
  //
  // $hide_from_docs
  ON_REQUEST = 1;

  // ADD ON_RESPONSE=2 if there is a need.
}
